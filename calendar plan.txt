BUSINESS
√ new menu icon of Calendar
√ menu: first time - enable button and settings for # timeslots
√ calendar is a date picker and a flat list
  √ Date + time CR Name CR Email CR Contact Number CR message
√ timeslots is the amoint of booking per hour...  
√ home page - show number of bookings
√ need to add timeslots to business profile

SHOPPER
- button will be on the business page at the top
- user can enter Name, email, contact number, message. Only email is mandatory
- user selects a date and time slot.
- Does the shopper need a menu option to record bookings? Add one
- Maybe point above: Place to see bookings placed: WHERE booking_date > current


<Picker
  selectedValue={selectedLanguage}
  onValueChange={(itemValue, itemIndex) =>
    setSelectedLanguage(itemValue)
  }>
  <Picker.Item label="Java" value="java" />
  <Picker.Item label="JavaScript" value="js" />
</Picker>









import React, { useEffect, useState, useReducer } from 'react';
import { useFocusEffect } from '@react-navigation/native';
import DataPool from '../../../services/Datapool';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { getBusBookings } from '../../../services/api_helper';
import { ActivityIndicator, SafeAreaView, StyleSheet, ScrollView, FlatList, TouchableOpacity, View, TextInput } from "react-native";
import MainStyles from "../../../assets/styles/MainStyles";
import { Layout, Toggle, Card, Text, Icon } from "@ui-kitten/components";
import { BotNavBusiness } from '../../../components/BotNavBusiness';
import { ButtonPrimary } from '../../../components/ButtonPrimary';

const initialState = {
	businessId: null,
};

function reducer(state, action) 
{
	switch (action.type) 
	{
	  case 'BUS_BOOKINGS':
		return { ...state, ...action.payload };
	  default:
		throw new Error();
	}
}

const Bookings = () => 
{
	const dp = DataPool.getInstance();
	const [isLoading, setIsLoading] = useState(true);
	const [refresh, setRefresh] = useState(false);
	const [businessId, setBusinessId] = useState('');
	const [isEnabled, setIsEnabled] = useState(dp.getCalendarEnabled());
	const [checked, setChecked] = useState(false);
	const [max, setMax] = useState('');
	const [bookings, setBookings] = useState([]);
	const [listMsg, setListMsg] = useState('');

	useEffect(() => 
	{
		const fetchSettings = async () => 
		{
			const calendarEnabled = await AsyncStorage.getItem('calendar_enabled');
			console.log('enabled xxx ', calendarEnabled);
			const maxBookings = await AsyncStorage.getItem('max_bookings');
			console.log('maxBookings xxx ', maxBookings);
			const bId = await AsyncStorage.getItem('business_id');
			setIsEnabled(JSON.parse(calendarEnabled));
			setChecked(JSON.parse(calendarEnabled));
			setMax(maxBookings);
			setBusinessId(JSON.parse(bId));
			console.log('businessId xxx ',checked);

			if (checked)
			{
				await getBusBookings(businessId)
				.then((res) => 
				{
					console.log('FUCK FUCK c xxadx ', res);
					setBookings(res.records);

					if (bookings.length > 0)
					{
						setListMsg("Upcoming bookings list")
					} 
					else 
					{
						setListMsg("No bookings");
					}

					setIsLoading(false);
				});
			} 
			else 
			{
				setBookings([]);
				setIsLoading(false);
			}
		}

		fetchSettings();
	}, []);

	useFocusEffect(React.useCallback(() => 
		{
			const fetchData = async () => 
			{
				await getBusBookings(businessId)
				.then((res) => 
				{
					console.log('FUCK FUCK c xxadx ', res);
					setBookings(res.records);

					if (bookings.length > 0)
					{
						setListMsg("Upcoming bookings list")
					} 
					else 
					{
						setListMsg("No bookings");
					}

					setIsLoading(false);
				});
			};
			setIsLoading(true);
			fetchData();
		}, [refresh]));

	const handleSaveSettings = async () => 
	{
		await AsyncStorage.setItem('calendar_enabled', JSON.stringify(checked));
		await AsyncStorage.setItem('max_bookings', max);

		AsyncStorage.getAllKeys((err, keys) => {
			AsyncStorage.multiGet(keys, (error, stores) => {
			  stores.map((result, i, store) => {
				console.log({ [store[i][0]]: store[i][1] });
				return true;
			  });
			});
		  });
		
		dp.setCalendarEnabled(checked);
		setIsEnabled(checked);
	}

	const renderItem = ({ item }) => (
		<Card style={{marginBottom: 5}}>
			<View>
				<View style={styles.list_row}>
					<View style={{flexDirection: 'column', width: '60%'}}>
						<Text style={styles.list_title}>Name</Text>
						<Text style={styles.list_data}>{item.shopper_name == '' ? '-' : item.shopper_name}</Text>
					</View>
					<View style={{flexDirection: 'column', width: '40%'}}>
						<Text style={styles.list_title}>Sent</Text>
						<Text style={styles.list_data}>{item.booking_add_date == 0 ? '-' : convertTimestampToDateTime(item.booking_add_date)}</Text>
					</View>
				
				</View>
				<View style={styles.list_row}>
					<View style={{flexDirection: 'column', width: '60%'}}>
						<Text style={styles.list_title}>Email</Text>
						<Text style={styles.list_data}>{item.shopper_email == '' || item.shopper_email == null ? '-' : item.shopper_email}</Text>
					</View>
					<View style={{flexDirection: 'column', width: '40%'}}>
						<Text style={styles.list_title}>Contact Number</Text>
						<Text style={styles.list_data}>{item.shopper_number == '' ? '-' : item.shopper_number}</Text>
					</View>
				</View>
				<View style={styles.list_row}>
					<View style={{flexDirection: 'column', width: '60%'}}>
						<Text style={styles.list_title}>Date Requested</Text>
						<Text style={styles.list_data}>{item.booking_for_date == 0 ? '-' : convertTimestampToDateTime(item.booking_for_date)}</Text>
					</View>
					<View style={{flexDirection: 'column', width: '40%'}}>
						<Text style={styles.list_title}>&nbsp;</Text>
						<Text style={styles.list_data}>&nbsp;</Text>
					</View>
				</View>
				<View style={styles.list_row}>
					<View style={{flexDirection: 'column', width: '100%'}}>
						<Text style={styles.list_title}>Message</Text>
						<Text style={styles.list_data}>{item.booking_msg == '' ? '-' : item.booking_msg}</Text>
					</View>
				</View>
			</View>
		</Card>
	);

	const convertTimestampToDateTime = (timestamp) => 
	{
		const date = new Date(timestamp * 1000);
		const day = date.getDate().toString().padStart(2, '0');
		const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-based an all
		const year = date.getFullYear();
		const hours = date.getHours().toString().padStart(2, '0');
		const minutes = date.getMinutes().toString().padStart(2, '0');
		return `${day}/${month}/${year} ${hours}:${minutes}`;
	};

	if (isLoading) 
	{
		return (
			<View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
				<ActivityIndicator size="large" color="#0000ff" />
			</View>
		);
	}

	return (
        <SafeAreaView style={{ flex: 1, backgroundColor: 'white' }}>
			<Layout style={[MainStyles.layout_container, { paddingTop: 30, paddingStart: 20, paddingEnd: 20, backgroundColor: '#fff'}]}>
				{/* <ScrollView style={{ width: '100%' }}> */}
				<View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', width: '100%', marginTop: 0 }}>	
					<Text style={[ MainStyles.title_aaa, { textAlign: 'left', flex: 1 }]}>Bookings</Text>
					<TouchableOpacity style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-end', width: 50 }} onPress={() => setRefresh(!refresh)}>
						<Icon name="refresh-outline" fill={isEnabled ? '#898989' : '#612bc1'} style={{ width: 24, height: 24, marginStart: 5}}/>
					</TouchableOpacity>
					<TouchableOpacity style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-end', width: 40 }} onPress={() => setIsEnabled(!isEnabled)}>
						<Icon name="settings-outline" fill={isEnabled ? '#898989' : '#612bc1'} style={{ width: 24, height: 24, marginStart: 5}}/>
					</TouchableOpacity>
				</View>
					{isEnabled ? 
					(
						<View style={{ flexDirection: 'column', marginTop: 0, alignItems: 'left', justifyContent: 'center', width: '100%' }} >
							<Text style={[MainStyles.title_a15, { textAlign: 'left', marginTop: 10, paddingEnd: 10 }]}>{listMsg}</Text>
							<FlatList
							data={bookings}
							keyExtractor={(item) => item.id.toString()}
							renderItem={renderItem}
							style={{ width: '100%', paddingTop: 10 }}
						/>
						</View>
					) 
					: 
					(
						<View style={{ flexDirection: 'column', marginTop: 0, alignItems: 'left', justifyContent: 'center', width: '100%' }} >
							<Text style={[MainStyles.title_a15, { textAlign: 'left', marginTop: 0, paddingEnd: 10 }]}>Bookings settings</Text>
							<Card style={{ marginTop: 20, marginBottom: 10 }}>
							<View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', width: '100%', marginTop: 0 }}>	
								<Text style={[MainStyles.title_a14, MainStyles.mb_0]}>Enable bookings</Text>
								<Toggle
									checked={checked}
									onChange={setChecked}
									>
								</Toggle>
							</View>
							<View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', width: '100%', paddingBottom: 20}}>
								<Text style={[MainStyles.title_a14, MainStyles.mb_0]}>Maximum bookings per hour:</Text>
								<TextInput
								style={styles.input}
								onChangeText={nextValue => {
								  const numericValue = nextValue.replace(/[^0-9]/g, '');
								  setMax(numericValue);
								}}
								value={max}
								placeholder=""
								keyboardType="numeric"
								/>
							</View>
							<ButtonPrimary name="Save Settings" width="100%" onpress={handleSaveSettings}/>
							</Card>
						</View>
					)}


					{/* <View style={{ flexDirection: 'column', marginTop: 0, alignItems: 'left', justifyContent: 'center', width: '100%' }} >
						<Text style={[MainStyles.title_a15, { textAlign: 'left', marginTop: 10, paddingEnd: 10 }]}>Please contact admin when you have an issue such as reporting a user, system issues etc.</Text>
					</View> */}
					
				{/* </ScrollView> */}
			</Layout>
            <BotNavBusiness selected={2}/>
        </SafeAreaView>
    );
}

const styles = StyleSheet.create({
	list_row: {
		flexDirection: 'row', 
		alignItems: 'center', 
		justifyContent: 'space-between',
		rowGap: 10,
	},
	list_title: {
		fontSize: 12,
		fontWeight: 'bold',
	},
	list_data: {
		fontSize: 14,
		marginBottom: 5
	}
  });

export default Bookings;